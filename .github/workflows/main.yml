name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: List files and directories
      run: ls
    - name: Setup .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore Clean-Onion_Architecture.sln
    - name: Set up JDK 11 (if needed for your project)
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./.sonar/scanner  # Create the directory using a Linux-compatible command
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner  # Path separator adjusted for Linux

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_KMS }}
      run: |
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"medidata" /o:"kms-medidata" /d:sonar.login="${{ secrets.SONAR_TOKEN_KMS }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL_KMS }}"
        dotnet build --no-restore Clean-Onion_Architecture.sln
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN_KMS }}"

    - name: Build (optional)
      run: dotnet build --no-restore Clean-Onion_Architecture.sln
    - name: Install SonarScanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./.sonar/scanner  # Create the directory
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

    - name: SonarScanner for .NET 6
      uses: sonarsource/sonarcloud-github-action@v1.7  # Specify a version
      with:
        entryPoint: ./.sonar/scanner/dotnet-sonarscanner  # Adjust path if needed
        args: 'begin /k:"$(SONAR_PROJECT_KEY)" /o:"$(SONAR_ORGANIZATION)" /d:sonar.login="${{ secrets.SONAR_TOKEN_KMS }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL_KMS }}"'
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_KMS }}
        GITHUB_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: medidata  # Add this line
        SONAR_ORGANIZATION: kms-medidata  # Add this line
    - name: CodeCov (optional)
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    # - name: Test
    #   run: dotnet test --no-build --verbosity normal
    # - name: dotnet-tests-report (optional)
    #   uses: zyborg/dotnet-tests-report@v1.3.0
    #   with:
    #     project_path: Tests
    #     report_name: tests
    #     report_title: Tests
    #     github_token: ${{ secrets.SONAR_TOKEN }}
